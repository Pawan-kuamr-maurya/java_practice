# Doubly Linked List Implementation in Java
This project demonstrates a basic implementation of a doubly linked list (DLL) in Java. It includes methods to add nodes at the beginning, remove nodes at a given position, and display the list in forward or reverse order.

------------


**Features**
Add nodes to the beginning of the list
Remove a node at a specific position
Display list elements from head to tail (forward) or tail to head (reverse)
Handles edge cases such as empty list and invalid positions
Implementation Details
**Classes**
Node: Represents each element in the list, containing data, next, and prev pointers.
Doublelinklist: Manages the list with references to head and tail, and supports operations like add, remove, and display.
Constructors
Default constructor: Initializes an empty list.
Single data constructor: Creates a list with one node containing the provided data.
**Methods**
- add_as_first(int data1): Adds a new node at the beginning of the list.
- remove(int position): Removes the node at the specified position (0-based index).
- get(boolean reverse): Prints the list elements; true for reverse order, false for forward.
- reverse(): it revese the internal pointer of DLinkList 
